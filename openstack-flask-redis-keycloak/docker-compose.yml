version: '3.8'

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    # volumes: # Optional: for persistent Redis data
    #   - redis_/data
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2 # Use a specific stable version
    # Use 'start-dev' for development mode (HTTP, auto-configures some settings)
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin # Change this for production
      # Important for HTTP mode in development
      KC_HTTP_ENABLED: 'true'
      KC_HOSTNAME_STRICT: 'false' # Allows access via IP or different hostname
      KC_HOSTNAME_STRICT_HTTPS: 'false' # Disables HTTPS requirement
      # Proxy settings if behind a reverse proxy (often needed in Docker)
      KC_PROXY: edge # or 'reencrypt' or 'passthrough' depending on your setup
    ports:
      - "8080:8080" # Expose Keycloak on port 8080 for HTTP
    # volumes: # Optional: for importing realms or custom themes
    #   - ./keycloak-import:/opt/keycloak/data/import # Example
    networks:
      - app-network
    # Healthcheck to ensure Keycloak is ready before Flask tries to connect
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  flask-app:
    build: .
    # Or if you don't want to build, use an image (ensure it exists or is pushed)
    # image: your-flask-app-image:tag
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      # Ensure your .env file or these env vars match the Docker internal network names
      # Update these values in your .env or here if needed for Docker networking
      # Example: If Keycloak URL is accessed via http://keycloak:8080 within Docker
      # KEYCLOAK_SERVER_URL=http://keycloak:8080
      # REDIS_URL=redis://redis:6379 # Or set this in .env
    depends_on:
      redis:
        condition: service_started
      keycloak:
        condition: service_healthy # Wait for Keycloak to be healthy
    # volumes: # Optional: for live code reloading during development
    #   - .:/app
    # command: flask run --host=0.0.0.0 --reload --debugger # For dev with reloading if using flask run directly
    networks:
      - app-network

# Volumes for persistent data (uncomment if needed)
# volumes:
#   redis_

# Networks to allow services to communicate
networks:
  app-network:
    driver: bridge